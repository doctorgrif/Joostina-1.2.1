<?php
/**
* @package Joostina
* @copyright Авторские права (C) 2008 Joostina team. Все права защищены.
* @license Лицензия http://www.gnu.org/licenses/gpl-2.0.htm GNU/GPL, или LICENSE.php
* Joostina! - свободное программное обеспечение распространяемое по условиям лицензии GNU/GPL
* Для просмотра подробностей и замечаний об авторском праве, смотрите файл COPYRIGHT.php.
*/
/** Import the interface for creating a new store class. */
require_once($mosConfig_absolute_path.'/includes/openid/Auth/OpenID/Interface.php' );
require_once($mosConfig_absolute_path.'/includes/openid/Auth/OpenID/HMAC.php' );
/**
 * This is a store for use in the worst case, when you have no way of saving state on the consumer site. Using this store makes the
 * consumer vulnerable to replay attacks, as it's unable to use nonces. Avoid using this store if it is at all possible.
 * Most of the methods of this class are implementation details.
 * Users of this class need to worry only about the constructor.
 * @package OpenID
 */
class Auth_OpenID_DumbStore extends Auth_OpenID_OpenIDStore {
/**
 * Creates a new {@link Auth_OpenID_DumbStore} instance. For the security of the tokens generated by the library, this class attempts to
 * at least have a secure implementation of getAuthKey.
 * When you create an instance of this class, pass in a secret phrase. The phrase is hashed with sha1 to make it the correct
 * length and form for an auth key. That allows you to use a long string as the secret phrase, which means you can make it very
 * difficult to guess.
 * Each {@link Auth_OpenID_DumbStore} instance that is created for use by your consumer site needs to use the same $secret_phrase.
 * @param string secret_phrase The phrase used to create the auth
 * key returned by getAuthKey
 */
function Auth_OpenID_DumbStore($secret_phrase)
{
$this->auth_key = Auth_OpenID_SHA1($secret_phrase);
}
/** This implementation does nothing. */
function storeAssociation($server_url, $association)
{
}
/** This implementation always returns null. */
function getAssociation($server_url, $handle = null)
{
return null;
}
/** This implementation always returns false. */
function removeAssociation($server_url, $handle)
{
return false;
}
/**
 * In a system truly limited to dumb mode, nonces must all be accepted. This therefore always returns true, which makes
 * replay attacks feasible.
 */
function useNonce($server_url, $timestamp, $salt)
{
return true;
}
/** This method returns the auth key generated by the constructor. */
function getAuthKey()
{
return $this->auth_key;
}
}
?>